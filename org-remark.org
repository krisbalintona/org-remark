#+title: Org-remark User Manual
#+author: Noboru Ota <me@nobiot.com>
#+macro: version 1.2.x
#+macro: modified 20 August 2023
#+language: en
#+export_file_name: org-remark.texi
#+texinfo_dir_category: Emacs
#+texinfo_dir_title: Org-remark: (org-remark)
#+texinfo_dir_desc: Highlight and annotate any text file
#+texinfo: @paragraphindent asis
#+options: toc:nil ':t

This manual is for Org-remark version {{{version}}}. Some new features are mentioned in this manual that are currently in development; these are mentioned clearly as such.

Last updated: {{{modified}}}.

Org-remark lets you highlight and annotate text files and websites (EWW).

#+texinfo: @insertcopying

* COPYING
:PROPERTIES:
:COPYING: t
:END:

Copyright \copy 2021-2022  Free Software Foundation, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being “A GNU Manual,” and
with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled “GNU Free Documentation License.”

(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
modify this GNU manual.”
#+end_quote

* Installation
:PROPERTIES:
:CUSTOM_ID: installation
:END:

This package is available on:

- [[https://elpa.gnu.org/packages/org-remark.html][GNU-ELPA]] (releases only; equivalent to MELPA-Stable)
- [[https://elpa.gnu.org/devel/org-remark.html][GNU-devel ELPA]] (unreleased development branch; equivalent to MELPA)

GNU ELPA should be already set up in your Emacs by default. If you wish to add GNU-devel ELPA, simply add its URL to ~package-archives~ like this:

#+BEGIN_SRC elisp
  (add-to-list 'package-archives
               '("gnu-devel" . "https://elpa.gnu.org/devel/") :append)
#+END_SRC

After installation, we suggest you put the setup below in your configuration.

#+name: basic-setup
#+begin_src emacs-lisp
  (org-remark-global-tracking-mode +1)

  ;; Optional if you would like to highlight websites via eww-mode
  (with-eval-after-load 'eww
    (org-remark-eww-mode +1))

  ;; Optional if you would like to highlight EPUB books via nov.el
  (with-eval-after-load 'nov
    (org-remark-nov-mode +1))

  ;; Optional if you would like to highlight Info documentation via Info-mode
  (with-eval-after-load 'info
    (org-remark-info-mode +1))
#+end_src

~org-remark-global-tracking-mode~ automatically turns on ~org-remark-mode~ when you open a file, website via EWW, EPUB book via nov.el, or other supported buffer that has a marginal notes file associated with it. This is useful to keep the location of your highlights correct across Emacs sessions after you shutdown Emacs.

Unless you explicitly load ~org~ during Emacs initialization, we suggest to defer loading ~org-remark~ (thus there is no ~(require 'org-remark)~ in the example above). This is because it will also pull in ~org~, which can slow down initialization. You can control the timing of loading ~org-remark~ by autoloading some commands in a similar way with the example keybindings below.

Below are example keybindings you might like to consider:

#+begin_src emacs-lisp
  ;; Key-bind `org-remark-mark' to global-map so that you can call it
  ;; globally before the library is loaded.

  (define-key global-map (kbd "C-c n m") #'org-remark-mark)

  ;; The rest of keybidings are done only on loading `org-remark'
  (with-eval-after-load 'org-remark
    (define-key org-remark-mode-map (kbd "C-c n o") #'org-remark-open)
    (define-key org-remark-mode-map (kbd "C-c n ]") #'org-remark-view-next)
    (define-key org-remark-mode-map (kbd "C-c n [") #'org-remark-view-prev)
    (define-key org-remark-mode-map (kbd "C-c n r") #'org-remark-remove))
#+end_src

* Getting Started
:PROPERTIES:
:CUSTOM_ID: getting-started
:END:

** Highlighting and Annotating

#+findex: org-remark-mark
#+findex: org-remark-open
#+findex: org-remark-view
#+cindex: Marginal notes file

Once you have installed and set it up ([[#installation][Installation]]), Org-remark is simple to use. Select a part of text and call ~M-x org-remark-mark~ to highlight it. You will see the selected text gets highlighted.

The menu bar item "Org-remark" is available when you turn on ~org-remark-mode~. It helps you discover Org-remark's main commands. If you use Emacs version 28 or newer, a context menu is also available by right-clicking your mouse. Turn on the Emacs built-in ~context-menu-mode~ to enable the context menu.

To display the marginal notes for the highlight you have just marked, place your cursor on the highlight and call ~M-x org-remark-open~ or ~M-x org-remark-view~. This will display a new buffer to the left of the current buffer you are editing. The ~open~ command takes the cursor to the marginal notes buffer for you to edit notes; whereas the ~view~ command keeps the cursor in the current buffer only to display the marginal notes. Both commands narrow the *marginal notes file* to the entry for the highlight under the cursor.  The marginal notes file is a normal Org file. Edit your notes just as you would do with any other Org files and save the buffer.

** Navigating from One Highlight to Another

#+findex: org-remark-view-next
#+findex: org-remark-view-prev
#+cindex: Menu in the menu bar
#+cindex: Context menu

After you have added a couple of highlights in the text, you can move through the highlights easily. Use ~org-remark-view-next~ and ~org-remark-view-prev~ to browse the marginal notes as you move from one highlight to another. They display the marginal notes on the side-window by default. Or use ~org-remark-next~ and ~org-remark-prev~ if you simply want to move to the next/previous highlight without displaying marginal notes for them.

To make navigation easy, you can use define the same "prefix key" to Org-remark commands like this:

- ~C-c n o~: ~org-remark-open~
- ~C-c n ]~: ~org-remark-view-next~
- ~C-c n [~: ~org-remark-view-prev~
- ~C-c n r~: ~org-remark-remove~
- ~C-c n d~: ~org-remark-delete~

The ~C-c n~ part is the prefix key common to all of them. If you set the keybindings like this, you can use ~C-c n ]~ once to view the next highlight and keep pressing a single key ~]~ or ~[~ to browse through the next/previous highlights. After you have reached the one you like to act on, press ~o~ to open it, ~r~ or ~d~ to remove/delete it.

** Create Your Own Highlighter Pens

#+cindex: Custom highlighter pens

Org-remark has a default highlighter pen function, and comes with a set of two additional pens by default:

- ~org-remark-mark~        :: default highlighter pen
- ~org-remark-mark-yellow~    :: yellow highlight with "important" category in the marginal notes entry
- ~org-remark-mark-red-line~   :: wavy red underline with "review" category in the marginal notes entry and "Review this" in tool-tips

Org-remark lets you create your own custom pen functions with ~org-remark-create~. Use the yellow and red line pens as examples, and create your own. For how to do it, [[#create-custom-pens][How to Create Custom Highlighter Pens]].

This is all you need to get started. For more detail, refer to the rest of this user manual, especially [[#usage][Usage]] and [[#customizing][Customizing]] sections. There is more to the commands introduced in this section and more ways in which you can customize Org-remark.

** Highlight and Annotate Websites

#+cindex: Highlighting websites with EWW
#+findex: org-remark-eww-mode

~org-remark-eww-mode~ lets you highlight and annotate websites just like text files. It is a global minor mode. It does not require any additional configuration. All you need is to turn it on, visit a website with ~eww-mode~, and select text and highlight it. Refer to the example of a basic setup given in [[#installation][Installation]]. Org-remark can attempt to automatically adjust the position of highlights when a websites get edited. Lear more about the feature in [[#auto-adjust][What is Automatic Adjustment of Highlight Positions?]]

** Highlight and Annotate EPUB Books

#+cindex: Highlighting EPUB Books with nov.el
#+findex: org-remark-nov-mode

~org-remark-nov-mode~ lets you highlight and annotate EPUB books just like text files. It is a global minor mode. It does not require any additional configuration. All you need is to turn it on, open a EPUB book with ~nov-mode~, and select text and highlight it. Refer to the example of a basic setup given in [[#installation][Installation]]. If you read books with tables, it is useful to learn about the feature that automatically adjust the highlight positions: [[#auto-adjust][What is Automatic Adjustment of Highlight Positions?]]

** Highlight and Annotate Info documentation in ~Info-mode~

#+cindex: Highlighting Info documentation with Info-mode
#+findex: org-remark-info-mode

~org-remark-info-mode~ lets you highlight and annotate Info documentation just like text files. It is a global minor mode. It does not require any additional configuration. All you need is to turn it on, open an Info node with ~Info-mode~, and select text and highlight it. Refer to the example of a basic setup given in [[#installation][Installation]].

* Usage, Features, Concepts
:PROPERTIES:
:CUSTOM_ID: usage
:END:

** How to Create Custom Highlighter Pens
:PROPERTIES:
:CUSTOM_ID: create-custom-pens
:END:

#+cindex: Custom highlighter pens
#+cindex: Org-remark properties for highlights
#+findex: org-remark-mark
#+findex: org-remark-mark-yellow
#+findex: org-remark-mark-red-line
#+findex: org-remark-create

~org-remark-create~ is a macro that lets you create your own custom pen functions. Org-remark comes with two additional pens that are created by default. Use them as examples to learn how to create your own.

#+begin_src elisp
  (org-remark-create "red-line"
                     '(:underline (:color "dark red" :style wave))
                     '(CATEGORY "review" help-echo "Review this"))
  (org-remark-create "yellow"
                     '(:underline "gold" :background "lemon chiffon")
                     '(CATEGORY "important"))
#+end_src

- Macro: ~org-remark-create~ label &optional face properties ::
  Create and register new highlighter pen functions. The newly created pen function will be registered to variable ~org-remark-available-pens~.  It is used by ~org-remark-change~ as a selection list.

  LABEL is the name of the highlighter and mandatory.  The function will be named ~org-remark-mark-LABEL~.

  The highlighter pen function will apply FACE to the selected region. FACE can be an anonymous face.  When FACE is nil, this macro uses the default face ~org-remark-highlighter~.

  PROPERTIES is a plist of pairs of a symbol and value. Each highlighted text region will have a corresponding Org headline in the notes file, and it can have additional properties in the property drawer from the highlighter pen.  To do this, prefix property names with "=org-remark-=" or use "=CATEGORY=".

#+ATTR_TEXINFO: :tag NOTE
#+begin_quote
Don't use =category= (all lowercase, symbol) as a property -- it's a special one for text properties. If you use it, the value also need to be a symbol; otherwise, you will get an error. You can use =CATEGORY= (all uppercase, symbol), which will result in adding =CATEGORY= with the value in the property drawer in marginal notes Org files.
#+end_quote

** How to Automatically Turn On Highlights after Re-starting Emacs

#+findex: org-remark-global-tracking-mode
#+findex: org-remark-mode

It is recommended that ~org-remark-global-tracking-mode~ be turned on as part of your Emacs initialization. This should be done before you start adding highlights in any file.

Once you have added highlights to some files, quit Emacs, and re-start it, active ~org-remark-global-tracking-mode~ will automatically turn on ~org-remark-mode~ and load the highlights from your previous sessions for the files being globally tracked.

Without this global minor mode, you would need to remember to activate ~org-remark-mode~ for each file where you add highlights and annotation. This is often unpractical.

** How to Manage Marginal Notes
:PROPERTIES:
:DESCRIPTION: Where Org-remark stores highlights and how to control it
:END:

*** Marginal Notes File

#+cindex: Marginal notes file
#+cindex: Org-remark properties for highlights

When you mark a part of text with a highlighter pen function, Org-remark will automatically create a *marginal notes file*. By default, it will be named ~marginalia.org~ and created in the same directory as the file you are editing ([[#change-marginal-notes-filename][How to Change Where Marginal Notes File is Saved]] [[#customizing][;Customizing]], ~org-remark-notes-file-name~).

The important thing to note is that Org-remark uses following properties in the property drawer of the headline to remember the highlights:

- :org-remark-beg:
- :org-remark-end:
- :org-remark-id:
- :org-remark-label:

Essentially, the marginal notes file is a database in the plain text with using Org mode. As a plain text database, you can easily edit these properties manually if necessary. You can directly edit the marginal notes file as a normal Org file.

The marginal notes file stores highlights and notes like this below; it is designed to organize highlights and notes for multiple files and multiple highlights.

#+begin_src org
  ,* File 1
  ,** Highlight 1 in File 1
  ,** Highlight 2 in File 1
  [...]
  ,* File 2
  ,** Highlight 1 in File 2
  [...]
#+end_src

You can leave the marginal notes file as it is without writing any notes. In this case, the entries in marginal notes file simply save the locations of your highlighted text. After you quit Emacs,  re-start it, and visit the same source file, Org-remark uses this information to highlight the text again.

In addition to the properties above that Org-remark reserves for itself, you can add your own custom properties and ~CATEGORY~ property. Use "org-remark-" as the prefix to the property names (or "CATEGORY", which is the only exception), and Org-remark put them to the property drawer of highlight's headline entry in the marginal notes buffer. Define the custom properties in your own custom pen functions (for how to create your own pens, [[#create-custom-pens][How to Create Custom Highlighter Pens]]).

*** =*marginal-notes*= Buffer

#+cindex: *marginal notes* buffer
#+cindex: Echo text / Tool tip on the Highlight

When you display the marginal notes with ~org-remark-view~ or ~org-remark-open~ for a given highlight, Org-remark creates a cloned indirect buffer visiting the marginal notes file. By default, it is a dedicated side-window opened to the left part of the current frame, and it is named =*marginal notes*=. You can change the behavior of ~display-buffer~ function and the name of the buffer ([[#customizing][Customizing]]).

Org-remark displays the marginal notes buffer narrowed to the highlight the cursor is on.

After all the properties, you can freely write your notes for the highlight. Once you save the notes buffer, an excerpt of the text (currently up to 200 characters) gets updated back onto the highlight in the source buffer. You can hover your mouse over the highlight to see the excerpt displayed in the echo area (bottom of the screen) of Emacs. If you have ~tooltip-mode~ mode turned on, the excerpt is displayed as a took tip for the highlight.

*** How to Change Where Marginal Notes File is Saved
:PROPERTIES:
:CUSTOM_ID: change-marginal-notes-filename
:END:

#+vindex: org-remark-notes-file-name

The location of the marginal notes file is specified by user option ~org-remark-notes-file-name~ and its default is "marginalia.org". This means the marginal notes file will reside in the same directory as the source files as a separate file.

If you use the ~customize~ command to customize ~org-remark-notes-file-name~, you will have an option to choose a =File= or =Function= (customization group ~org-remark~). The default is =File= with the default "marginal.org" as noted above.  Use a string to specify the single file name; you can specify a relative path like the default or an absolute path.

If you would like to dynamically change the location based on the file and various different conditions, select the function as an option.  The default function is ~org-remark-notes-file-name-function~. It adds =-notes.org= as a suffix to the source file's name without the extension. For example, for a file named =my-source-file.txt=,  Org-remark will store highlights in  =my-source-file-notes.org=.  You can create your own function and use it.

Some examples and use cases are listed below:

- Store Marginal Notes in the Source File ::
  In order to use the source file also as the marginal notes file (storing the notes in the source file), you can set the built-in function ~buffer-file-name~ as the value of ~org-remark-notes-file-name~. Note that you will need to ensure that the source files are an Org file.

- Create a marginal notes file for each source file and store all of them in a specific location ::
  Create a custom function that returns an absolute file name per source file, and set ~org-remark-notes-file-name~ to the function name. It might look like this:

  #+begin_src elisp
    (defun my/function ()
      (concat "~/path/to/note-files/"
              (file-name-base (org-remark-notes-file-name-function))
              ".org"))

    (setq org-remark-notes-file-name
          #'my/function)
  #+end_src

*** How to Use Relative or Absolute File Names for Links in Marginal Notes File
#+cindex: Relative or absolute file names pointing back at source files in marginal notes
#+vindex: org-remark-source-file-name

The marginal notes file stores the file name pointing back at source files. For example, a marginal notes entry for File1.txt might look like this example below.

#+begin_src org
  ,* File 1
  :PROPERTIES:
  :org-remark-file: path/to/File1.txt
  :END:
  ,** Highlight 1 in File 1
  :PROPERTIES:
  :[...other-properties]:
  :org-remark-link: [[file:path/to/File1.txt::14]]
  :END:
#+end_src

The level-1 headline named "File 1" records the file name of the source file =path/to/File1.txt=.  Similarly, the level-2 headline named "Highlight 1 in File 1" stores the link pointing back at the source file and the line number of the highlight.

As you can see, both file names use a relative file name from the marginal notes file. This is the default setting of ~org-remark-source-file-name~.

You can customize the variable to use absolute file names, or to use a function of your choice. The function is called with a single argument: the absolute file name of source file.  The ~default-directory~ is temporarily set to the directory where the marginal notes file resides. If you choose to use relative file names, the relative path is computed from ~default-directory~.

** How to Remove and Delete Highlights
#+findex: org-remark-remove
#+findex: org-remark-delete

You can remove the highlight under the cursor with command `org-remark-remove`. This command does not delete the corresponding entry in the marginal notes file. This is intentional; Org-roam is conservative when it deletes anything that the user might have edited.

If you wish to delete the entry and the highlight at the same time, pass a universal argument to `org-remark-remove` (e.g. by adding ~C-u~ before ~M-x org-remark-remove~) or use ~org-remark-delete~. ~org-remark-delete~ is identical with adding ~C-u~ to ~org-remark-remove~.

The delete function will prompt for confirmation if it detects any notes present in the corresponding entry for the highlight in question in the marginal notes buffer.

- Command ~org-remark-remove~ ::
  Remove the highlight at point.
  It will remove the highlight and the properties from the marginal notes file, but will keep the headline and annotations. This is to ensure to keep any notes you might have written intact.
  You can let this command DELETE the entire heading subtree for the highlight along with the annotations you have written, by passing a universal argument with ~C-u~. If you have done so by error, you could still ~undo~ it in the marginal notes buffer, but not from within the current buffer as adding and removing overlays are not part of the undo tree.

- Command ~org-remark-delete~ ::
  Delete the highlight at POINT and marginal notes for it.
  This function will prompt for confirmation if there is any notes present in the marginal notes buffer.  When the marginal notes buffer is not displayed in the current frame, it will be temporarily displayed together with the prompt for the user to see the notes.
  If there is no notes, this function will not prompt for confirmation and will remove the highlight and deletes the entry in the marginal notes buffer. This command is identical with passing a universal argument to `org-remark-remove'.

** What is Automatic Adjustment of Highlight Positions?
:PROPERTIES:
:CUSTOM_ID: auto-adjust
:END:
#+cindex: Org-remark automatically adjusts positions of highlights
#+vindex: org-remark-icon-position-adjusted
#+vindex: org-remark-highlighter-warning

Org-remark by default attempts to automatically adjust the position of highlights when they are loaded. This is useful especially for EPUB books read by nov.el. It renders tables in different sizes depending on the available space of the window to maximize their readability.

This is a good feature for reading; however, it also changes the positions of subsequent text elements depending on the window size when the page is rendered. It can result in dislocating the positions of highlights, different from they are originally created.

Org-remark attempts to automatically corrects the highlights dislocated. This is a general feature so Org-remark attempts to correct minor edits to websites (for EWW).

More technically, it works as follows.

1. When you create a new highlight, Org-remark records the original text highlighted in the Org property named "~org-remark-original-text~".

2. Next time when you open a new file (EPUB book as an example), Org-remark loads the highlights from the notes Org buffer.

3. For each highlight, it compares the currently highlighted text with the value of ~org-remark-original-text~ property.

4. If they are the same, Org-remark does nothing.

5. If different, Org-remark by default looks for the same text string +- two paragraphs. When it finds the *first* matching text string, it automatically moves the highlight to the matched text string.

6. Org-remark adds an icon to the auto-adjusted highlight to make it clear that the position of highlight has been adjusted.

7. This adjustment is temporary. If you prefer to change the position permanently, you can do so by manually changing the ~org-remark-beg~ and ~org-remark-end~ properties in the notes buffer and save. You can also choose to alter the value of ~org-remark-original-text~ if you have adjusted the range of highlighted text.

You can customize the icon itself and its face with the following customizing variables:

- Option: ~org-remark-icon-position-adjusted~
- Face: ~org-remark-highlighter-warning~

** Other Commands
#+findex: org-remark-toggle
#+findex: org-remark-change
#+findex: org-remark-next
#+findex: org-remark-prev

- Command ~org-remark-toggle~ ::
  Toggle showing/hiding of highlights in current buffer.
  If you would like to hide/show the highlights in the current buffer, it is recommended to use this command instead of ~org-remark-mode~. This command only affects the display of the highlights and their locations are still kept tracked.  Toggling off ~org-remark-mode~ stops this tracking completely, which will likely result in inconsistency between the marginal notes file and the current source buffer.

- Command ~org-remark-change~ ::
  Change the highlight at point to one by another pen. This command will show you a list of available pens to choose from.

To navigate through highlights in the current buffer, you can use ~org-remark-view-next~ / ~org-remark-view-prev~ or the following pair of commands. The former moves your cursor and displays the marginal notes buffer; the latter only moves your cursor.

- Command ~org-remark-next~ ::
  Move to the next highlight, if any.
  If there is none below the point but there is a highlight in the buffer, cycle back to the first one.
  After the point has moved to the next highlight, this command lets you move further by re-entering only the last letter like this example:  =C-n ] ] ] ] ]= (assuming this command is bound to C-n ])

- Command ~org-remark-prev~ ::
  Move to the previous highlight, if any.

* Customizing
:PROPERTIES:
:CUSTOM_ID: customizing
:END:

#+vindex: org-remark-highlighter
#+vindex: org-remark-create-default-pen-set
#+vindex: org-remark-notes-file-name
#+vindex: org-remark-notes-display-buffer-action
#+vindex: org-remark-notes-buffer-name
#+vindex: org-remark-source-file-name
#+vindex: org-remark-use-org-id
#+vindex: org-remark-open-hook
#+vindex: org-remark-icon-notes
#+vindex: org-remark-icon-position-adjusted
#+vindex: org-remark-highlights-after-load-functions
#+vindex: org-remark-highlighter-warning

Org-remark's user options are available in the customization group ~org-remark~.

- Face: ~org-remark-highlighter~ ::
  Default face for ~org-remark-mark~

- Option: ~org-remark-create-default-pen-set~ ::
  When non-nil, Org-remark creates default pen set. Set to nil if you prefer for it not to.

- Option: ~org-remark-notes-file-name~ ::
  Name of the file where we store highlights and marginal notes. It can be either a string or function.
  If it is a string, it should be a file name to the marginal notes file. The default is =marginalia.org=.  The default will result in one marginal notes file per directory.  Ensure that it is an Org file.
  If it is a function, the default function is ~org-remark-notes-file-name-function~.  It returns a file name like this: =FILE-notes.org= by adding =-notes.org= as a suffix to the file name without the extension.

- Option: ~org-remark-notes-display-buffer-action~ ::
  Buffer display action that Org-remark uses to open marginal notes buffer.

- Option: ~org-remark-notes-buffer-name~ ::
  Buffer name of the marginal notes buffer. ~org-remark-open~ and ~org-remark-visit~ create an indirect clone buffer with this name.

- Option: ~org-remark-source-file-name~ ::
  Function that returns the file name to point back at the source file.
  The function is called with a single argument: the absolute file name of source file.  The =default-directory= is temporarily set to the directory where the marginal notes file resides.
  This means that when the =Relative file name= option is selected, the source file name recorded in the marginal notes file will be relative to it.

- Option: ~org-remark-use-org-id~ ::
  When non-nil, Org-remark adds an Org-ID link to marginal notes. The link points at the relevant Org-ID in the source file. Org-remark does not create this ID, which needs to be added manually or some other function to either the headline or file.

- Option: ~org-remark-icon-notes~ ::
  It's the icon used to indicate that a given highlight has its associated notes entry. The default is a combination of ascii characters to be comatible with terminal and others. If it is preferred, you can set an emoji to it. The author has not experienmented well with icon fonts and other means of displaying graphic elements. The face of the icon becomes the same as the highlight, thus it does not have its own face definition.

  By setting it to ~nil~, you can disable the icon altogether.

  ~org-remark-toggle~ also toggles the icon along with the highlight

- Option: ~org-remark-icon-position-adjusted~ :
  It's the icon used to indicate that the position of a given highlight has been automatically adjusted by Org-remark. The default is a combination of ascii characters to be comatible with terminal and others. If it is preferred, you can set an emoji to it. The author has not experienmented well with icon fonts and other means of displaying graphic elements.

  By setting it to ~nil~, you can disable the icon altogether.

  ~org-remark-toggle~ also toggles the icon along with the highlight

- Face: ~org-remark-highlighter-warning~ ::
  This face is used by the icon to indicate that the position of a given highlight has been adjusted. To know more about the feature itself, refer to [[#auto-adjust][What is Automatic Adjustment of Highlight Positions?]].

- Option: ~org-remark-open-hook~ ::
  Hook run when a note buffer is opened/visited. It gets run with no additional argument but the current buffer will become the note buffer.

- Option ~org-remark-highlights-after-load-functions~ ::
  Abnormal hook run after Org-remark loads the highlights from the note org buffer. It is run with OVERLAYS and NOTES-BUF as arguments. OVERLAYS are highlights. It is run with the source buffer as current buffer. This hook is used by the automatic adjustment feature. To know more about the feature itself, refer to [[#auto-adjust][What is Automatic Adjustment of Highlight Positions?]].

* Known Limitations

- No export together with the source file :: There is no out-of-the-box feature to export marginal notes together with the source file.  Nevertheless, the marginal notes is a normal Org file, thus if the source file is also an Org file, you could use the built-in =include= feature, for example, to include relevant parts of the marginal notes into the export output.

- Copy & pasting loses highlights :: Overlays are not part of the kill; thus cannot be yanked.

- Undo highlight does not undo it :: Overlays are not part of the undo list; you cannot undo highlighting. Use ~org-remark-remove~ or ~org-remark-delete~ commands instead.

- Moving source files and marginal notes files :: Moving your files and remark file to another directory does not update the source paths and file names stored in the marginal notes file. One way to keep the links between the source files and marginal notes files is to use relative file names with ~org-remark-source-file-name~ (default).

- With ~org-remark-eww-mode~ highlights can get displaced :: This happens when the website is edited and its content changes outside Emacs -- of course this is normal for websites. Currently there is no way to fix the location of highlights.

* Credits

To create this package, I was inspired by the following packages. I did not copy any part of them, but borrowed some ideas from them -- e.g. saving the margin notes in a separate file.

- [[https://github.com/jkitchin/ov-highlight][Ov-highlight]] :: John Kitchin's (author of Org-ref). Great UX for markers with hydra. Saves the marker info and comments directly within the Org file as Base64 encoded string. It uses overlays with using ~ov~ package.

- [[https://github.com/bastibe/annotate.el][Annotate.el]] :: Bastian Bechtold's (author of Org-journal). Unique display of annotations right next to (or on top of) the text. It seems to be designed for very short annotations, and perhaps for code review (programming practice); I have seen recent issues reported when used with variable-pitch fonts (prose).

- [[https://github.com/tkf/org-mode/blob/master/contrib/lisp/org-annotate-file.el][Org-annotate-file]] :: Part of Org's contrib library. It seems to be designed to annotate a whole file in a separate Org file, rather than specific text items.

- [[https://github.com/IdoMagal/ipa.el][InPlaceAnnotations (ipa-mode)]] :: It looks similar to Annotate.el above.

- Transient navigation feature :: To implement the transient navigation feature, I liberally copied the relevant code from a wonderful Emacs package, [[https://github.com/rnkn/binder/blob/24d55db236fea2b405d4bdc69b4c33d0f066059c/binder.el#L658-L665][Binder]] by Paul W. Rankin (GitHub user [[https://github.com/rnkn][rnkn]]).

* Contributing & Feedback

Create issues, discussion, and/or pull requests in the GitHub repository. All welcome.

Org-remark is planned to be submitted to GNU ELPA and thus copyrighted by the [[http://fsf.org][Free Software Foundation]] (FSF). This means that anyone who is making a substantive code contribution will need to "assign the copyright for your contributions to the FSF so that they can be included in GNU Emacs" ([[https://orgmode.org/contribute.html#copyright][Org Mode website]]).

Thank you.

* Index - Features
:PROPERTIES:
:CUSTOM_ID: cindex
:APPENDIX: t
:INDEX:    cp
:DESCRIPTION: Key concepts & features
:END:

* Index - Commands
:PROPERTIES:
:APPENDIX: t
:INDEX:    fn
:DESCRIPTION: Interactive functions
:END:

* Index - User Options
:PROPERTIES:
:APPENDIX: t
:INDEX:    vr
:DESCRIPTION: Customizable variables & faces
:END:

* GNU Free Documentation License
:PROPERTIES:
:appendix: t
:END:

#+texinfo: @include fdl.texi

# Local Variables:
# time-stamp-start: "modified +\\\\?"
# End:
